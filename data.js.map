{"version":3,"sources":["src/data.js"],"names":["ComposedComponent","opts","endpoint","get","Object","assign","default","WithData","Component","getInitialProps","ctx","serverState","apollo","data","cookie","composedInitialProps","cookieSource","process","browser","document","req","headers","router","asPath","pathname","query","error","rewind","cache","extract","constructor","props","render","displayName","propTypes","object","isRequired"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;kBAEe,uBAAa,CAACA,iBAAD,EAAoBC,IAApB,KAA6B;AACvD,QAAM,EAAEC,QAAF,KAAe,iBAAOC,GAAP,EAArB;AACAF,SAAOG,OAAOC,MAAP,CAAc;AACnBH;AADmB,GAAd,EAEJD,QAAQ,EAFJ,CAAP;AAGAA,OAAKC,QAAL,GAAgBD,KAAKK,OAAL,IAAgBL,KAAKC,QAArC;;AAEA,QAAMK,QAAN,SAAuB,gBAAMC,SAA7B,CAAuC;;AAQrC,iBAAaC,eAAb,CAA6BC,GAA7B,EAAkC;AAChC;AACA,UAAIC,cAAc;AAChBC,gBAAQ;AACNC,gBAAM;AADA,SADQ;AAIhBC,gBAAQ;;AAGV;AAPkB,OAAlB,CAQA,IAAIC,uBAAuB,EAA3B;AACA,UAAIf,kBAAkBS,eAAtB,EAAuC;AACrCM,+BAAuB,MAAMf,kBAAkBS,eAAlB,CAAkCC,GAAlC,CAA7B;AACD;;AAED;AACA;AACA,YAAMM,eAAeC,QAAQC,OAAR,GAAkBC,QAAlB,GAA6BT,IAAIU,GAAJ,CAAQC,OAA1D;AACA,YAAMT,SAAS,oBAAU,IAAV,EAAgB,EAAEV,UAAUD,KAAKC,QAAjB,EAA2Bc,YAA3B,EAAhB,CAAf;AACA,UAAI;AACF;AACA,cAAM,kCACJ;AAAA;AAAA,YAAgB,QAAQJ,MAAxB;AACE,wCAAC,iBAAD,EAAuBG,oBAAvB;AADF,SADI,EAIJ;AACEO,kBAAQ;AACNC,oBAAQb,IAAIa,MADN;AAENC,sBAAUd,IAAIc,QAFR;AAGNC,mBAAOf,IAAIe;AAHL;AADV,SAJI,CAAN;AAYD,OAdD,CAcE,OAAOC,KAAP,EAAc;AACd;AACA;AACA;AACD;;AAED,UAAI,CAACT,QAAQC,OAAb,EAAsB;AACpB;AACA;AACA,uBAAKS,MAAL;AACD;;AAED;AACAhB,oBAAc;AACZC,gBAAQ;AACNC,gBAAMD,OAAOgB,KAAP,CAAaC,OAAb;AADA,SADI;AAIZf,gBAAQE,aAAaF;AAJT,OAAd;;AAOA;AACEH;AADF,SAEKI,oBAFL;AAID;;AAEDe,gBAAYC,KAAZ,EAAmB;AACjB,YAAMA,KAAN;AACA,YAAMf,eAAeC,QAAQC,OAAR,GAAkBC,QAAlB,GAA6B,KAAKY,KAAL,CAAWpB,WAA7D;AACA,WAAKC,MAAL,GAAc,oBAAU,KAAKmB,KAAL,CAAWpB,WAAX,CAAuBC,MAAvB,CAA8BC,IAAxC,EAA8C,EAAEX,UAAUD,KAAKC,QAAjB,EAA2Bc,YAA3B,EAA9C,CAAd;AACD;;AAEDgB,aAAS;AACP,aACE;AAAA;AAAA,UAAgB,QAAQ,KAAKpB,MAA7B;AACE,sCAAC,iBAAD,EAAuB,KAAKmB,KAA5B;AADF,OADF;AAKD;AA/EoC;;AAAjCxB,UAPiD,CAQ9C0B,WAR8C,GAQ/B,YAAW,kCAC/BjC,iBAD+B,CAE/B,GAVmD;AAOjDO,UAPiD,CAW9C2B,SAX8C,GAWlC;AACjBvB,iBAAa,oBAAUwB,MAAV,CAAiBC;AADb,GAXkC;AAyFvD,SAAO7B,QAAP;AACD,CA1Fc,C","file":"data.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { ApolloProvider, getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\nimport config from './config'\n\nimport { getDecorator, getComponentDisplayName, getApollo } from './lib'\n\nexport default getDecorator((ComposedComponent, opts) => {\n  const { endpoint } = config.get()\n  opts = Object.assign({\n    endpoint\n  }, opts || {})\n  opts.endpoint = opts.default || opts.endpoint\n\n  class WithData extends React.Component {\n    static displayName = `WithData(${getComponentDisplayName(\n      ComposedComponent\n    )})`\n    static propTypes = {\n      serverState: PropTypes.object.isRequired\n    }\n\n    static async getInitialProps(ctx) {\n      // Initial serverState with apollo (empty)\n      let serverState = {\n        apollo: {\n          data: {},\n        },\n        cookie: null\n      }\n\n      // Evaluate the composed component's getInitialProps()\n      let composedInitialProps = {}\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx)\n      }\n\n      // Run all GraphQL queries in the component tree\n      // and extract the resulting data\n      const cookieSource = process.browser ? document : ctx.req.headers\n      const apollo = getApollo(null, { endpoint: opts.endpoint, cookieSource })\n      try {\n        // Run all GraphQL queries\n        await getDataFromTree(\n          <ApolloProvider client={apollo}>\n            <ComposedComponent {...composedInitialProps} />\n          </ApolloProvider>,\n          {\n            router: {\n              asPath: ctx.asPath,\n              pathname: ctx.pathname,\n              query: ctx.query\n            }\n          }\n        )\n      } catch (error) {\n        // Prevent Apollo Client GraphQL errors from crashing SSR.\n        // Handle them in components via the data.error prop:\n        // http://dev.apollodata.com/react/api-queries.html#graphql-query-data-error\n      }\n\n      if (!process.browser) {\n        // getDataFromTree does not call componentWillUnmount\n        // head side effect therefore need to be cleared manually\n        Head.rewind()\n      }\n\n      // Extract query data from the Apollo store\n      serverState = {\n        apollo: {\n          data: apollo.cache.extract(),\n        },\n        cookie: cookieSource.cookie\n      }\n\n      return {\n        serverState,\n        ...composedInitialProps\n      }\n    }\n\n    constructor(props) {\n      super(props)\n      const cookieSource = process.browser ? document : this.props.serverState\n      this.apollo = getApollo(this.props.serverState.apollo.data, { endpoint: opts.endpoint, cookieSource })\n    }\n\n    render() {\n      return (\n        <ApolloProvider client={this.apollo}>\n          <ComposedComponent {...this.props} />\n        </ApolloProvider>\n      )\n    }\n  }\n\n  return WithData\n})\n"]}