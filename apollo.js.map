{"version":3,"sources":["src/apollo.js"],"names":["process","browser","global","fetch","createApolloClient","initialState","endpoint","get","httpLink","uri","credentials","authMiddleware","operation","forward","headers","authorization","getAuthorization","console","log","setContext","connectToDevTools","ssrMode","link","cache","restore","cookieSource","cookieToken","source","Apollo","client","getClient","newApolloClient","resetStore","getCache","extract"],"mappings":";;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AAEA;;;;AACA;;;;AAEA;AACA,IAAI,CAACA,QAAQC,OAAb,EAAsB;AACpBC,SAAOC,KAAP;AACD;;AAED,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AACxC,QAAM,EAAEC,QAAF,KAAe,iBAAOC,GAAP,EAArB;;AAEA,QAAMC,WAAW,6BAAa;AAC5BC,SAAKH,QADuB,EACb;AACfI,iBAAa,SAFe,CAEL;AAFK,GAAb,CAAjB;;AAKA,QAAMC,iBAAiB,2BAAe,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AAC5D,UAAMC,UAAU,EAAhB;AACA,UAAMC,gBAAgBC,kBAAtB;AACA,QAAID,aAAJ,EACED,QAAQC,aAAR,GAAwBA,aAAxB;;AAEFE,YAAQC,GAAR,CAAY,iBAAZ;;AAEA;AACAN,cAAUO,UAAV,CAAqB;AACnBL;AADmB,KAArB;;AAIA,WAAOD,QAAQD,SAAR,CAAP;AACD,GAdsB,CAAvB;;AAgBA,SAAO,+BAAiB;AACtBQ,uBAAmBpB,QAAQC,OADL;AAEtBoB,aAAS,CAACrB,QAAQC,OAFI,EAEK;AAC3BqB,UAAM,wBAAOX,cAAP,EAAuBH,QAAvB,CAHgB;AAItBe,WAAO,yCAAoBC,OAApB,CAA4BnB,gBAAgB,EAA5C;AAJe,GAAjB,CAAP;AAMD;;AAED,SAASW,gBAAT,GAA4B;AAC1B,QAAM,EAAES,YAAF,KAAmB,iBAAOlB,GAAP,EAAzB;;AAEA,QAAMmB,cAAc,mBAAQnB,GAAR,gCAAoC,EAAEoB,QAAQF,YAAV,EAApC,CAApB;AACA,SAAOC,cAAe,UAASA,WAAY,EAApC,GAAwC,IAA/C;AACD;;AAED,MAAME,MAAN,CAAa;AAAA;AAAA,SACXC,MADW,GACF,IADE;AAAA;;AAGXC,YAAUzB,YAAV,EAAwB;AACtB;AACA;AACA,QAAI0B,eAAJ;;AAEA,QAAI,CAAC/B,QAAQC,OAAT,IAAoB,CAAC,KAAK4B,MAA9B,EAAsCE,kBAAkB3B,mBAAmBC,YAAnB,CAAlB;;AAEtC,QAAI,CAACL,QAAQC,OAAb,EAAsB,OAAO8B,eAAP;;AAEtB;AACA,QAAI,CAAC,KAAKF,MAAV,EAAkB,KAAKA,MAAL,GAAcE,eAAd;;AAElB,WAAO,KAAKF,MAAZ;AACD;;AAEDG,eAAa;AACX,WAAO,KAAKF,SAAL,GAAiBE,UAAjB,EAAP;AACD;;AAEDC,aAAW;AACT,WAAO,KAAKH,SAAL,GAAiBP,KAAjB,CAAuBW,OAAvB,EAAP;AACD;AAxBU;;kBA2BE,IAAIN,MAAJ,E","file":"apollo.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { HttpLink } from 'apollo-link-http'\nimport { ApolloLink, concat } from 'apollo-link'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport fetch from 'isomorphic-unfetch'\nimport { Cookies } from 'js-cookies'\n\nimport config from './config'\nimport { CONST_AUTHTOKEN_COOKIE } from './lib/const'\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch\n}\n\nfunction createApolloClient(initialState) {\n  const { endpoint } = config.get()\n\n  const httpLink = new HttpLink({\n    uri: endpoint, // Server URL (must be absolute)\n    credentials: 'include' // Additional fetch() options like `credentials` or `headers`\n  })\n\n  const authMiddleware = new ApolloLink((operation, forward) => {\n    const headers = {}\n    const authorization = getAuthorization()\n    if (authorization)\n      headers.authorization = authorization\n\n    console.log('call middleware')\n\n    // add the authorization to the headers\n    operation.setContext({\n      headers\n    })\n\n    return forward(operation)\n  })\n\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: concat(authMiddleware, httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  })\n}\n\nfunction getAuthorization() {\n  const { cookieSource } = config.get()\n\n  const cookieToken = Cookies.get(CONST_AUTHTOKEN_COOKIE, { source: cookieSource })\n  return cookieToken ? `Bearer ${cookieToken}` : null\n}\n\nclass Apollo {\n  client = null\n\n  getClient(initialState) {\n    // Make sure to create a new client for every server-side request so that data\n    // isn't shared between connections (which would be bad)\n    let newApolloClient;\n\n    if (!process.browser || !this.client) newApolloClient = createApolloClient(initialState)\n\n    if (!process.browser) return newApolloClient\n\n    // Reuse client on the client-side\n    if (!this.client) this.client = newApolloClient\n\n    return this.client\n  }\n\n  resetStore() {\n    return this.getClient().resetStore()\n  }\n\n  getCache() {\n    return this.getClient().cache.extract()\n  }\n}\n\nexport default new Apollo()\n"]}