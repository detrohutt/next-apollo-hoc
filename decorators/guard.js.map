{"version":3,"sources":["../src/decorators/guard.js"],"names":["ComposedComponent","opts","default","guards","forEach","guard","index","name","add","get","find","g","WithGuard","Component","getInitialProps","ctx","composedInitialProps","apolloClient","getClient","router","asPath","pathname","query","error","process","browser","rewind","console","log","data","readQuery","e","undefined","next","render","props","displayName","decorator"],"mappings":"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","file":"guard.js","sourcesContent":["import React from 'react'\nimport { graphql, ApolloProvider, getDataFromTree } from 'react-apollo'\nimport Head from 'next/head'\n\nimport { getDecorator, getComponentDisplayName } from '../lib/component'\nimport apollo from '../apollo'\nimport config from \"../config\";\n\nexport default getDecorator((ComposedComponent, opts) => {\n  if (opts.default) {\n    opts.guards = [opts.default]\n  }\n\n  opts.guards.forEach((guard, index) => {\n    if ('object' === typeof guard && guard.name) {\n      config.add({ guards: [ guard ] })\n    }\n\n    if ('string' === typeof guard) {\n      opts.guards[index] = config.get().guards.find(g => guard === g.name)\n    }\n  })\n\n  class WithGuard extends React.Component {\n    static displayName = `WithGuard(${getComponentDisplayName(\n      ComposedComponent\n    )})`\n\n    static async getInitialProps(ctx) {\n      let guard\n\n      let composedInitialProps = {}\n      if (ComposedComponent.getInitialProps) {\n        composedInitialProps = await ComposedComponent.getInitialProps(ctx)\n      }\n\n      const apolloClient = apollo.getClient()\n      try {\n        await getDataFromTree(\n          <ApolloProvider client={apolloClient}>\n            <ComposedComponent {...composedInitialProps} />\n          </ApolloProvider>,\n          {\n            router: {\n              asPath: ctx.asPath,\n              pathname: ctx.pathname,\n              query: ctx.query\n            }\n          }\n        )\n      } catch (error) {\n      }\n\n      if (!process.browser) {\n        Head.rewind()\n      }\n\n      console.log('call guard')\n\n      opts.guards.forEach(g => {\n        let data = null\n\n        try {\n          data = apolloClient.readQuery({ query: g.query })\n        } catch (e) {\n          g.error && g.error(e)\n        }\n\n        try {\n          guard = undefined === guard ? g.guard(data) : g.guard(data) && guard\n\n          g.next && g.next(guard, ctx)\n        } catch (e) {\n          g.error && g.error(e)\n        }\n      })\n\n      opts.next && opts.next(guard)\n\n      return {\n        guard,\n        ...composedInitialProps\n      }\n    }\n\n    render() {\n      return (\n        <ComposedComponent {...this.props} />\n      )\n    }\n  }\n\n  let decorator = WithGuard\n  opts.guards.forEach(guard => {\n    if (guard.query)\n      decorator = graphql(guard.query)(decorator)\n  })\n\n  return decorator\n})"]}