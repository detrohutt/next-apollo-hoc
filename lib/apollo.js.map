{"version":3,"sources":["../src/lib/apollo.js"],"names":["getApollo","resetApollo","updateApollo","getApolloCache","process","browser","global","fetch","apolloClient","opts","initialState","configs","Object","assign","newApolloClient","create","resetStore","writeQuery","getAuthorization","cookieToken","cookieSource","get","source","httpLink","uri","endpoint","credentials","authMiddleware","operation","forward","headers","authorization","setContext","connectToDevTools","ssrMode","link","cache","restore","extract"],"mappings":";;;;;QAgBgBA,S,GAAAA,S;QAoBAC,W,GAAAA,W;QAIAC,Y,GAAAA,Y;QAsCAC,c,GAAAA,c;;AA9EhB;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AAEA;AACA,IAAI,CAACC,QAAQC,OAAb,EAAsB;AACpBC,SAAOC,KAAP;AACD;;AAED,IAAIC,eAAe,IAAnB;AACA,IAAIC,OAAO,EAAX;;AAEO,SAAST,SAAT,CAAmBU,YAAnB,EAAiC,GAAGC,OAApC,EAA6C;AAClDF,SAAOG,OAAOC,MAAP,CAAcJ,IAAd,EAAoB,GAAGE,OAAvB,CAAP;;AAEA;AACA;AACA,MAAIG,eAAJ;;AAEA,MAAI,CAACV,QAAQC,OAAT,IAAoB,CAACG,YAAzB,EACEM,kBAAkBC,OAAOL,YAAP,CAAlB;;AAEF,MAAI,CAACN,QAAQC,OAAb,EACE,OAAOS,eAAP;;AAEF;AACA,MAAI,CAACN,YAAL,EACEA,eAAeM,eAAf;;AAEF,SAAON,YAAP;AACD;;AAEM,SAASP,WAAT,GAAuB;AAC5B,SAAOO,aAAaQ,UAAb,EAAP;AACD;;AAEM,SAASd,YAAT,CAAsBO,IAAtB,EAA4B;AACjC,SAAOD,aAAaS,UAAb,CAAwBR,IAAxB,CAAP;AACD;;AAED,SAASS,gBAAT,GAA4B;AAC1B,MAAIC,WAAJ;AACA,MAAIV,KAAKW,YAAT,EAAuBD,cAAc,mBAAQE,GAAR,gCAAoC,EAAEC,QAAQb,KAAKW,YAAf,EAApC,CAAd;AACvB,SAAOD,cAAe,UAASA,WAAY,EAApC,GAAwC,IAA/C;AACD;;AAED,SAASJ,MAAT,CAAgBL,YAAhB,EAA8B;AAC5B,QAAMa,WAAW,6BAAa;AAC5BC,SAAKf,KAAKgB,QADkB,EACR;AACpBC,iBAAa,SAFe,CAEL;AAFK,GAAb,CAAjB;;AAKA,QAAMC,iBAAiB,2BAAe,CAACC,SAAD,EAAYC,OAAZ,KAAwB;AAC5D,UAAMC,UAAU,EAAhB;AACA,UAAMC,gBAAgBb,kBAAtB;AACA,QAAIa,aAAJ,EACED,QAAQC,aAAR,GAAwBA,aAAxB;;AAEF;AACAH,cAAUI,UAAV,CAAqB;AACnBF;AADmB,KAArB;;AAIA,WAAOD,QAAQD,SAAR,CAAP;AACD,GAZsB,CAAvB;;AAcA,SAAO,+BAAiB;AACtBK,uBAAmB7B,QAAQC,OADL;AAEtB6B,aAAS,CAAC9B,QAAQC,OAFI,EAEK;AAC3B8B,UAAM,wBAAOR,cAAP,EAAuBJ,QAAvB,CAHgB;AAItBa,WAAO,yCAAoBC,OAApB,CAA4B3B,gBAAgB,EAA5C;AAJe,GAAjB,CAAP;AAMD;;AAEM,SAASP,cAAT,GAA0B;AAC/B,SAAOK,aAAa4B,KAAb,CAAmBE,OAAnB,EAAP;AACD","file":"apollo.js","sourcesContent":["import { ApolloClient } from 'apollo-client'\nimport { HttpLink } from 'apollo-link-http'\nimport { ApolloLink, concat } from 'apollo-link'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport fetch from 'isomorphic-unfetch'\nimport { Cookies } from 'js-cookies'\nimport { CONST_AUTHTOKEN_COOKIE } from './const'\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch\n}\n\nlet apolloClient = null\nlet opts = {}\n\nexport function getApollo(initialState, ...configs) {\n  opts = Object.assign(opts, ...configs)\n\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  let newApolloClient;\n\n  if (!process.browser || !apolloClient)\n    newApolloClient = create(initialState)\n\n  if (!process.browser)\n    return newApolloClient\n\n  // Reuse client on the client-side\n  if (!apolloClient)\n    apolloClient = newApolloClient\n\n  return apolloClient\n}\n\nexport function resetApollo() {\n  return apolloClient.resetStore()\n}\n\nexport function updateApollo(opts) {\n  return apolloClient.writeQuery(opts)\n}\n\nfunction getAuthorization() {\n  let cookieToken\n  if (opts.cookieSource) cookieToken = Cookies.get(CONST_AUTHTOKEN_COOKIE, { source: opts.cookieSource })\n  return cookieToken ? `Bearer ${cookieToken}` : null\n}\n\nfunction create(initialState) {\n  const httpLink = new HttpLink({\n    uri: opts.endpoint, // Server URL (must be absolute)\n    credentials: 'include' // Additional fetch() options like `credentials` or `headers`\n  })\n\n  const authMiddleware = new ApolloLink((operation, forward) => {\n    const headers = {}\n    const authorization = getAuthorization()\n    if (authorization)\n      headers.authorization = authorization\n\n    // add the authorization to the headers\n    operation.setContext({\n      headers\n    })\n\n    return forward(operation)\n  })\n\n  return new ApolloClient({\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser, // Disables forceFetch on the server (so queries are only run once)\n    link: concat(authMiddleware, httpLink),\n    cache: new InMemoryCache().restore(initialState || {})\n  })\n}\n\nexport function getApolloCache() {\n  return apolloClient.cache.extract()\n}\n"]}