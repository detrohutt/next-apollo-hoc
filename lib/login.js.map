{"version":3,"sources":["../src/lib/login.js"],"names":["opts","add","auth","login","get","res","loginMutation","variables","update","store","data","e","console","error","authToken","set","source","cookieSource","days","resetStore","updateStore","getClient","writeQuery","next"],"mappings":";;;;;;AAAA;;AAEA;;;;AACA;;AACA;;;;;;kBAEe,gBAAgBA,IAAhB,EAAsB;AACnC,mBAAOC,GAAP,CAAW,EAAEC,MAAM,EAAEC,OAAOH,IAAT,EAAR,EAAX;AACAA,SAAO,iBAAOI,GAAP,GAAaF,IAAb,CAAkBC,KAAzB;AACA,MAAIE,GAAJ;;AAEA,MAAI;AACFA,UAAM,MAAM,KAAKC,aAAL,CAAmB;AAC7BC,iBAAWP,KAAKO,SADa;AAE7BC,cAAQ,OAAOC,KAAP,EAAc,EAAEC,IAAF,EAAd,KAA2B;AACjC,YAAIV,KAAKQ,MAAT,EAAiB;AACf,cAAI;AACFR,iBAAKQ,MAAL,CAAYC,KAAZ,EAAmBC,IAAnB;AACD,WAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,oBAAQC,KAAR,CAAcF,CAAd;AACD;AACF;AACF;AAV4B,KAAnB,CAAZ;AAYD,GAbD,CAaE,OAAOA,CAAP,EAAU;AACVC,YAAQC,KAAR,CAAcF,CAAd;AACA,WAAO,KAAP;AACD;AACD,QAAMD,OAAOL,IAAIK,IAAjB;;AAEA,MAAI;AACF,UAAMI,YAAYd,KAAKc,SAAL,CAAeJ,IAAf,CAAlB;AACA,uBAAQK,GAAR,gCAAoCD,SAApC,EAA+C,EAAEE,QAAQhB,KAAKiB,YAAf,EAA6BC,MAAM,GAAnC,EAA/C;AACD,GAHD,CAGE,OAAOP,CAAP,EAAU;AACVC,YAAQC,KAAR,CAAcF,CAAd;AACA,WAAO,IAAP;AACD;;AAED,mBAAOQ,UAAP;;AAEA,MAAInB,KAAKoB,WAAT,EAAsB;AACpB,QAAI;AACF,uBAAOC,SAAP,GAAmBC,UAAnB,CAA8BtB,KAAKoB,WAAL,CAAiBV,IAAjB,CAA9B;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,cAAQC,KAAR,CAAcF,CAAd;AACD;AACF;;AAED,MAAIX,KAAKuB,IAAT,EAAe;AACb,QAAI;AACFvB,WAAKuB,IAAL,CAAUb,IAAV;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACVC,cAAQC,KAAR,CAAcF,CAAd;AACD;AACF;;AAED,SAAOD,IAAP;AACD,C","file":"login.js","sourcesContent":["import { Cookies } from 'js-cookies'\n\nimport config from '../config'\nimport { CONST_AUTHTOKEN_COOKIE } from './const';\nimport apollo from '../apollo'\n\nexport default async function (opts) {\n  config.add({ auth: { login: opts } })\n  opts = config.get().auth.login\n  let res\n\n  try {\n    res = await this.loginMutation({\n      variables: opts.variables,\n      update: async (store, { data }) => {\n        if (opts.update) {\n          try {\n            opts.update(store, data)\n          } catch (e) {\n            console.error(e)\n          }\n        }\n      }\n    });\n  } catch (e) {\n    console.error(e)\n    return false\n  }\n  const data = res.data\n\n  try {\n    const authToken = opts.authToken(data)\n    Cookies.set(CONST_AUTHTOKEN_COOKIE, authToken, { source: opts.cookieSource, days: 365 })\n  } catch (e) {\n    console.error(e)\n    return null\n  }\n\n  apollo.resetStore()\n\n  if (opts.updateStore) {\n    try {\n      apollo.getClient().writeQuery(opts.updateStore(data))\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  if (opts.next) {\n    try {\n      opts.next(data)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  return data\n}"]}